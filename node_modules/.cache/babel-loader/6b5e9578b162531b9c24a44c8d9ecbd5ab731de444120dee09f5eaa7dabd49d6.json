{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment: state => {\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter--;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toggleCounter: state => {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;\n\n// 1. Viene definito uno `initialState` che contiene due proprietà: `counter` (inizializzato a 0) e `showCounter` (inizializzato a `true`).\n\n// 2. Viene creato uno `slice` di Redux Toolkit chiamato `counterSlice` utilizzando la funzione `createSlice()`. Questa funzione prende:\n//    - `name`: il nome dello slice\n//    - `initialState`: lo stato iniziale\n//    - `reducers`: un oggetto che contiene le azioni che possono modificare lo stato\n\n// 3. Le azioni definite sono:\n//    - `increment`: incrementa il contatore di 1\n//    - `decrement`: decrementa il contatore di 1\n//    - `increase`: incrementa il contatore di un valore specifico passato come azione\n//    - `toggleCounter`: cambia il valore di `showCounter`\n\n// 4. Viene creato uno `store` Redux usando `configureStore()`, passando come `reducer` l'unico reducer dello slice `counterSlice.reducer`.\n\n// 5. Vengono esportate le azioni dello slice (`counterActions`) per poterle utilizzare all'interno del componente React.\n\n// Quindi, in sintesi, questo codice crea uno store Redux con un semplice modulo di contatore, che può essere utilizzato all'interno di un'applicazione React per gestire lo stato relativo al contatore e alla sua visualizzazione.\n\n// La ragione per cui devi esportare le azioni è che, in un'applicazione React, dovrai utilizzarle per aggiornare lo stato del contatore. Ad esempio, potresti avere un componente che utilizza queste azioni per incrementare, decrementare o aumentare il contatore in risposta agli input dell'utente.","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"sources":["C:/Users/gmedde/formazione/react/reduxCounter/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = {\r\n  counter: 0,\r\n  showCounter: true,\r\n};\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialCounterState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.counter++;\r\n    },\r\n    decrement: (state) => {\r\n      state.counter--;\r\n    },\r\n    increase: (state, action) => {\r\n      state.counter += action.payload;\r\n    },\r\n    toggleCounter: (state) => {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nconst store = configureStore({reducer: counterSlice.reducer})\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;\r\n\r\n\r\n// 1. Viene definito uno `initialState` che contiene due proprietà: `counter` (inizializzato a 0) e `showCounter` (inizializzato a `true`).\r\n\r\n// 2. Viene creato uno `slice` di Redux Toolkit chiamato `counterSlice` utilizzando la funzione `createSlice()`. Questa funzione prende:\r\n//    - `name`: il nome dello slice\r\n//    - `initialState`: lo stato iniziale\r\n//    - `reducers`: un oggetto che contiene le azioni che possono modificare lo stato\r\n\r\n// 3. Le azioni definite sono:\r\n//    - `increment`: incrementa il contatore di 1\r\n//    - `decrement`: decrementa il contatore di 1\r\n//    - `increase`: incrementa il contatore di un valore specifico passato come azione\r\n//    - `toggleCounter`: cambia il valore di `showCounter`\r\n\r\n// 4. Viene creato uno `store` Redux usando `configureStore()`, passando come `reducer` l'unico reducer dello slice `counterSlice.reducer`.\r\n\r\n// 5. Vengono esportate le azioni dello slice (`counterActions`) per poterle utilizzare all'interno del componente React.\r\n\r\n// Quindi, in sintesi, questo codice crea uno store Redux con un semplice modulo di contatore, che può essere utilizzato all'interno di un'applicazione React per gestire lo stato relativo al contatore e alla sua visualizzazione.\r\n\r\n// La ragione per cui devi esportare le azioni è che, in un'applicazione React, dovrai utilizzarle per aggiornare lo stato del contatore. Ad esempio, potresti avere un componente che utilizza queste azioni per incrementare, decrementare o aumentare il contatore in risposta agli input dell'utente.\r\n\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfJ,mBAAmB;EACnBK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQ,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC3BH,KAAK,CAACN,OAAO,IAAIS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,aAAa,EAAGL,KAAK,IAAK;MACxBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAMF,MAAMW,KAAK,GAAGf,cAAc,CAAC;EAACgB,OAAO,EAAEX,YAAY,CAACW;AAAO,CAAC,CAAC;AAC7D,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAAO;AAElD,eAAeH,KAAK;;AAGpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}